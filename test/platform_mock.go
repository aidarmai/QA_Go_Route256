// Code generated by MockGen. DO NOT EDIT.
// Source: ./test/platform.go

// Package test is a generated GoMock package.
package test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDeviceModel is a mock of DeviceModel interface.
type MockDeviceModel struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceModelMockRecorder
}

// MockDeviceModelMockRecorder is the mock recorder for MockDeviceModel.
type MockDeviceModelMockRecorder struct {
	mock *MockDeviceModel
}

// NewMockDeviceModel creates a new mock instance.
func NewMockDeviceModel(ctrl *gomock.Controller) *MockDeviceModel {
	mock := &MockDeviceModel{ctrl: ctrl}
	mock.recorder = &MockDeviceModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceModel) EXPECT() *MockDeviceModelMockRecorder {
	return m.recorder
}

// CountPlatform mocks base method.
func (m *MockDeviceModel) CountPlatform() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPlatform")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPlatform indicates an expected call of CountPlatform.
func (mr *MockDeviceModelMockRecorder) CountPlatform() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPlatform", reflect.TypeOf((*MockDeviceModel)(nil).CountPlatform))
}

// CountPlatformCertainType mocks base method.
func (m *MockDeviceModel) CountPlatformCertainType(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPlatformCertainType", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPlatformCertainType indicates an expected call of CountPlatformCertainType.
func (mr *MockDeviceModelMockRecorder) CountPlatformCertainType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPlatformCertainType", reflect.TypeOf((*MockDeviceModel)(nil).CountPlatformCertainType), arg0)
}
